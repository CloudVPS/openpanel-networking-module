#!/bin/bash
. /var/openpanel/api/sh/module.sh
. /var/openpanel/modules/Networking.module/localfunctions.sh

Module.getconfig() {
    GATEWAY=$(ip ro list | grep default | cut -f 3 -d ' ')
    V6_GATEWAY=$(ip -6 ro list | grep default | cut -f 3 -d ' ')
    INTERFACES=$(cat /proc/net/dev | grep : | cut -f 1 -d: | sed -e 's/ //g')

    PRI_NS=$(grep ^nameserver /etc/resolv.conf | head -1 | awk ' { print $2 } ')
    SEC_NS=$(grep ^nameserver /etc/resolv.conf | head -2 | tail -1 | awk ' { print $2 } ')
    SEARCHDOM=$(grep ^domain  /etc/resolv.conf | head -1 | awk ' { print $2 } ')

    [ "${PRI_NS}" = "${SEC_NS}" ] && SEC_NS=""

    cat << _EOF_
<openpanel.module>
  <dict id="Networking" type="class">
    <dict id="networking" type="object">
      <string id="def_gateway">${GATEWAY}</string>
      <string id="def6_gateway">${V6_GATEWAY}</string>
      <string id="pri_ns">${PRI_NS}</string>
      <string id="sec_ns">${SEC_NS}</string>
      <string id="search_dom">${SEARCHDOM}</string>
      <dict id="Networking:Interface" type="class">
_EOF_
for IFACE in ${INTERFACES}; do
    ADDRESSES=$(ip addr list dev ${IFACE} scope global | grep inet | awk ' { print $2 } ')
    UUID=$(/usr/bin/uuidgen)
    ENABLED="false"
    ip link show dev ${IFACE} | grep -q 'state UP' && ENABLED="true"

    if [ "${IFACE}" = "lo" ]; then
        ENABLED="true"
        ADDRESSES="127.0.0.1/8 ::1/128"
    fi

    cat <<_EOF_
        <dict id="${UUID}" type="object">
          <string id="dev_name">${IFACE}</string>
          <string id="dev_enabled">${ENABLED}</string>
          <dict id="Networking:Address" type="class">
_EOF_
    for ADDRESS in ${ADDRESSES}; do
        ADDR=$(echo ${ADDRESS} | cut -f1 -d/)
        NMSK=$(echo ${ADDRESS} | cut -f2 -d/)
        UUID=$(/usr/bin/uuidgen)
        cat <<_EOF_
            <dict id="${UUID}" type="object">
              <string id="address">${ADDR}</string>
              <string id="netmask">${NMSK}</string>
            </dict>
_EOF_
    done
    cat <<_EOF_
          </dict>
        </dict>
_EOF_
done
    cat << _EOF_
      </dict>
    </dict>
  </dict>
  <dict id="OpenCORE:Result">
    <integer id="error">0</integer>
    <string id="message">OK</string>
  </dict>
</openpanel.module>
_EOF_
    exitquiet
}

Module.update() {
    DST="networking.def"
    # Gateways
    :>${DST}
    
    networking_id=$(coreval Networking uuid)
    v4_gateway=$(coreval Networking def_gateway)
    v6_gateway=$(coreval Networking def6_gateway)
    pri_ns=$(coreval Networking pri_ns)
    sec_ns=$(coreval Networking sec_ns)
    search_dom=$(coreval Networking search_dom)

    [ ! -z ${v4_gateway} ] && echo -e "gw4\t${networking_id}\t${v4_gateway}" >> ${DST}
    [ ! -z ${v6_gateway} ] && echo -e "gw6\t${networking_id}\t${v6_gateway}" >> ${DST}

    ifaces=( $(coreval --loop Networking Networking:Interface) )
    _getinterfaces | while read interface; do
        dev_dhcp=$(_getinterfacedhcp ${interface})
        dev_enabled=$(_getinterfaceenabled ${interface})
        dev_name=$(_getinterfacename ${interface})
        dev_desc=$(_getinterfacedescription ${interface})
        echo -e "iface\t${interface}\t${dev_name}\t${dev_desc}\t${dev_enabled}" >> ${DST}
        if [ "${dev_dhcp}" = "true" ]; then
            echo -e "dhcp\t${interface}\ttrue" >> ${DST}
        fi
        for address in `_getinterfaceaddresses ${interface}`; do
            addr_desc=$(_getaddressdescription ${interface} ${address})
            addr_address=$(_getaddress ${interface} ${address})
            addr_netmask=$(_getaddressnetmask ${interface} ${address})
            echo -e "addr\t${address}\t${interface}\t${addr_address}\t${addr_netmask}\t${dev_name}\t${addr_desc}" >> ${DST}
        done
    done

    :> resolv.conf
    [ ! -z ${search_dom} ] && echo "domain ${search_dom}" > resolv.conf
    [ ! -z ${pri_ns} ]     && echo "nameserver ${pri_ns}" >> resolv.conf
    [ ! -z ${sec_ns} ]     && echo "nameserver ${sec_ns}" >> resolv.conf

    RESULT=$(authd runscript commitnetworkconfig) || exiterror "${RESULT}"

    exitok

}

Module.delete() {
    Module.update
}

Module.create() {
    Module.update
}

Networking:Interface.update() {
    dev=$(coreval Networking:Interface dev_name)

    egrep -q "^ +${dev}:" /proc/net/dev || exiterror "It is currently only possible to add existing interfaces"

    Module.update
    exitquiet
}

Networking:Address.update() {
    address=$(coreval Networking:Address address)
    netmask=$(coreval Networking:Address netmask)

    V6="false"
    echo ${address} | grep -q : && V6="true"

    if [ "$V6" = "false" ]; then
        [ $netmask -gt 32 ] && exiterror "Invalid value for netmask for an IPv4 address"
    fi

    Module.update

    exitquiet
}

implement Networking.module

