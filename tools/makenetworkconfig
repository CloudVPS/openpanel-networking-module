#!/usr/bin/env python

from ipaddr import *
interfaces = {}
gateways   = {}

f = open('/etc/openpanel/networking.def')
for line in f:
    fields = line.rstrip().split("\t")

    cmd = fields[0]
    uuid = fields[1]

    if cmd == "gw4":
        gateways['gw4'] = fields[2]
    elif cmd == "gw6":
        gateways['gw6'] = fields[2]
    elif cmd == "iface":
        interfaces[uuid] = dict(device=fields[2], description=fields[3], enabled=fields[4])
    elif cmd == "dhcp":
        interfaces[uuid]['dhcp'] = fields[2]
    elif cmd == "addr":
        if fields[3] == "127.0.0.1" or fields[3] == "::1":
            continue
        addr = {}
        addr[uuid] = {}
        addr[uuid]['address'] = fields[3]
        addr[uuid]['netmask'] = fields[4]

        addr_net = IPNetwork(fields[3]+'/'+fields[4])
        ipversion = str(addr_net.version)

        for gw in list(gateways):
            gw_ip = IPAddress(gateways[gw])
            if gw_ip.version != addr_net.version:
                continue
            if (gw_ip == addr_net.network) or ((gw_ip >= addr_net.network) and (gw_ip < addr_net.broadcast)):
                addr[uuid]['gateway'] = gateways[gw]
                interfaces[fields[2]]['gwaddr'+ipversion] = uuid
                del gateways[gw]

        interfaces[fields[2]]['has'+ipversion] = "true"
        try:
            interfaces[fields[2]]['addresses'].append(addr)
        except:
            interfaces[fields[2]]['addresses'] = []
            interfaces[fields[2]]['addresses'].append(addr)

f.close()

print """###
# This file is automatically generated by OpenPanel. Manual changes will be
# overwritten
###

"""

for i in interfaces:
    sn = interfaces[i]
    if sn['enabled'] == "false":
        continue

    print "# Device: "+sn['device']
    print "# Description: "+sn['description']
    print ""
    if sn['device'] == "lo":
        print "auto lo"
        print "iface lo inet loopback"
        print "\taddress 127.0.0.1"
        print "\tnetmask 255.255.255.0"
        print "iface lo inet6 loopback"
        print "\taddress ::1"
        print "\tnetmask 128"
    else:
        print "auto "+sn['device']
        if sn.has_key('dhcp') and sn['dhcp'] == "true":
            print "iface "+sn['device']+" inet dhcp"
            print ""
        elif sn.has_key('has4'):
            if sn.has_key('gwaddr4'):
                for x in sn['addresses']:
                    addr_id = sn['addresses'].index(x)
                    if x.has_key(sn['gwaddr4']):
                        print "iface "+sn['device']+" inet static"
                        print "\taddress "+x[sn['gwaddr4']]['address']
                        print "\taddress "+x[sn['gwaddr4']]['netmask']
                        print "\tgateway "+x[sn['gwaddr4']]['gateway']
                        del sn['addresses'][addr_id]

        if sn.has_key('has6'):
            if sn.has_key('gwaddr6'):
                for x in sn['addresses']:
                    addr_id = sn['addresses'].index(x)
                    if x.has_key(sn['gwaddr6']):
                        print "iface "+sn['device']+" inet6 static"
                        print "\taddress "+x[sn['gwaddr6']]['address']
                        print "\taddress "+x[sn['gwaddr6']]['netmask']
                        print "\tgateway "+x[sn['gwaddr6']]['gateway']
                        del sn['addresses'][addr_id]

    for x in sn['addresses']:
        addr = x.values()[-1]
        print "\tpost-up /sbin/ip address add "+addr['address']+"/"+addr['netmask']+" dev "+sn['device']


    print ""
